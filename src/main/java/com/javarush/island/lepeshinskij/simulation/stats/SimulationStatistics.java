package com.javarush.island.lepeshinskij.simulation.stats;

import com.javarush.island.lepeshinskij.model.core.Island;
import com.javarush.island.lepeshinskij.model.core.Location;
import com.javarush.island.lepeshinskij.model.organisms.Animal;
import com.javarush.island.lepeshinskij.model.organisms.herbivores.*;
import com.javarush.island.lepeshinskij.model.organisms.predators.*;
import com.javarush.island.lepeshinskij.service.OutputFactory;
import com.javarush.island.lepeshinskij.service.OutputService;

import java.util.HashMap;
import java.util.Map;

public class SimulationStatistics implements Runnable {
    private final OutputService output = OutputFactory.getOutputService();
    private final Island island;
    private final int day;

    private static final int MAX_BAR_LENGTH = 50;
    private static final Map<Class<? extends Animal>, String> ANIMAL_SYMBOLS = new HashMap<>();

    static {
        ANIMAL_SYMBOLS.put(Wolf.class, "üê∫");
        ANIMAL_SYMBOLS.put(Snake.class, "üêç");
        ANIMAL_SYMBOLS.put(Fox.class, "ü¶ä");
        ANIMAL_SYMBOLS.put(Bear.class, "üêª");
        ANIMAL_SYMBOLS.put(Eagle.class, "ü¶Ö");
        ANIMAL_SYMBOLS.put(Horse.class, "üêé");
        ANIMAL_SYMBOLS.put(Deer.class, "ü¶å");
        ANIMAL_SYMBOLS.put(Rabbit.class, "üêá");
        ANIMAL_SYMBOLS.put(Mouse.class, "üêÅ");
        ANIMAL_SYMBOLS.put(Goat.class, "üêê");
        ANIMAL_SYMBOLS.put(Sheep.class, "üêë");
        ANIMAL_SYMBOLS.put(Boar.class, "üêó");
        ANIMAL_SYMBOLS.put(Buffalo.class, "üêÉ");
        ANIMAL_SYMBOLS.put(Duck.class, "ü¶Ü");
        ANIMAL_SYMBOLS.put(Caterpillar.class, "üêõ");
    }

    public SimulationStatistics(Island island, int day) {
        this.island = island;
        this.day = day;
    }

    @Override
    public void run() {
        Map<Class<? extends Animal>, Integer> animalCounts = countAnimals();
        double totalPlants = countPlants();

        displayStatistics(animalCounts, totalPlants);
    }

    private Map<Class<? extends Animal>, Integer> countAnimals() {
        Map<Class<? extends Animal>, Integer> counts = new HashMap<>();

        counts.put(Wolf.class, 0);
        counts.put(Snake.class, 0);
        counts.put(Fox.class, 0);
        counts.put(Bear.class, 0);
        counts.put(Eagle.class, 0);
        counts.put(Horse.class, 0);
        counts.put(Deer.class, 0);
        counts.put(Rabbit.class, 0);
        counts.put(Mouse.class, 0);
        counts.put(Goat.class, 0);
        counts.put(Sheep.class, 0);
        counts.put(Boar.class, 0);
        counts.put(Buffalo.class, 0);
        counts.put(Duck.class, 0);
        counts.put(Caterpillar.class, 0);

        for (Location location : island.getAllLocations()) {
            for (Class<? extends Animal> animalClass : counts.keySet()) {
                int count = location.getAnimalCountByType(animalClass);
                counts.put(animalClass, counts.get(animalClass) + count);
            }
        }

        return counts;
    }

    private double countPlants() {
        double totalPlants = 0;

        for (Location location : island.getAllLocations()) {
            totalPlants += location.getPlantsWeight();
        }

        return totalPlants;
    }

    private String createGraphBar(int count, int maxCount, String symbol) {
        if (maxCount <= 0) return "";

        int barLength = (int) Math.ceil(((double) count / maxCount) * MAX_BAR_LENGTH);
        barLength = Math.min(barLength, MAX_BAR_LENGTH);

        StringBuilder bar = new StringBuilder();
        for (int i = 0; i < barLength; i++) {
            bar.append(symbol);
        }

        return bar.toString();
    }

    private void displayStatistics(Map<Class<? extends Animal>, Integer> animalCounts, double totalPlants) {
        output.println("\n============= –î–ï–ù–¨ " + day + " =============");
        output.println("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–ü–£–õ–Ø–¶–ò–ò:");

        int maxCount = animalCounts.values().stream().mapToInt(Integer::intValue).max().orElse(1);

        output.println("\n–•–ò–©–ù–ò–ö–ò:");
        displayAnimalWithGraph(animalCounts, Wolf.class, "–í–æ–ª–∫–∏", maxCount);
        displayAnimalWithGraph(animalCounts, Snake.class, "–£–¥–∞–≤—ã", maxCount);
        displayAnimalWithGraph(animalCounts, Fox.class, "–õ–∏—Å—ã", maxCount);
        displayAnimalWithGraph(animalCounts, Bear.class, "–ú–µ–¥–≤–µ–¥–∏", maxCount);
        displayAnimalWithGraph(animalCounts, Eagle.class, "–û—Ä–ª—ã", maxCount);

        output.println("\n–¢–†–ê–í–û–Ø–î–ù–´–ï:");
        displayAnimalWithGraph(animalCounts, Horse.class, "–õ–æ—à–∞–¥–∏", maxCount);
        displayAnimalWithGraph(animalCounts, Deer.class, "–û–ª–µ–Ω–∏", maxCount);
        displayAnimalWithGraph(animalCounts, Rabbit.class, "–ö—Ä–æ–ª–∏–∫–∏", maxCount);
        displayAnimalWithGraph(animalCounts, Mouse.class, "–ú—ã—à–∏", maxCount);
        displayAnimalWithGraph(animalCounts, Goat.class, "–ö–æ–∑—ã", maxCount);
        displayAnimalWithGraph(animalCounts, Sheep.class, "–û–≤—Ü—ã", maxCount);
        displayAnimalWithGraph(animalCounts, Boar.class, "–ö–∞–±–∞–Ω—ã", maxCount);
        displayAnimalWithGraph(animalCounts, Buffalo.class, "–ë—É–π–≤–æ–ª—ã", maxCount);

        output.println("\n–í–°–ï–Ø–î–ù–´–ï:");
        displayAnimalWithGraph(animalCounts, Duck.class, "–£—Ç–∫–∏", maxCount);

        output.println("\n–û–°–û–ë–´–ï:");
        displayAnimalWithGraph(animalCounts, Caterpillar.class, "–ì—É—Å–µ–Ω–∏—Ü—ã", maxCount);

        output.println("\n–†–ê–°–¢–ï–ù–ò–Ø:");
        output.printf("–û–±—â–∏–π –≤–µ—Å —Ä–∞—Å—Ç–µ–Ω–∏–π: %.2f –∫–≥%n", totalPlants);

        int plantsScaled = (int) (totalPlants / 10);
        String plantGraph = createGraphBar(plantsScaled, plantsScaled, "üåø");
        output.println(plantGraph);

        int totalAnimals = animalCounts.values().stream().mapToInt(Integer::intValue).sum();
        output.println("\n–û–ë–©–ï–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ñ–ò–í–û–¢–ù–´–•: " + totalAnimals);

        output.println("=====================================\n");
    }

    private void displayAnimalWithGraph(Map<Class<? extends Animal>, Integer> animalCounts,
                                        Class<? extends Animal> animalClass,
                                        String animalName,
                                        int maxCount) {
        int count = animalCounts.get(animalClass);
        String symbol = ANIMAL_SYMBOLS.getOrDefault(animalClass, "‚óè");
        String graph = createGraphBar(count, maxCount, symbol);
        output.printf("%-10s: %-5d %s%n", animalName, count, graph);
    }
}